#include <LineFollowing/LineFollowingTask.h>

LineFollowingTask::LineFollowingTask(IR &ir, MotorControl &motorControl) 
    : _ir(ir), _motorControl(motorControl), _taskHandle(NULL), _taskRunning(false) {}

void LineFollowingTask::startTask() {
    if (_taskHandle == NULL) {
        _taskRunning = true;
        xTaskCreate(irMeasureTask, "LineFollowingTask", _taskStackSize, this, _taskPriority, &_taskHandle);
    }
}

void LineFollowingTask::stopTask() {
    if (_taskHandle != NULL) {
        _motorControl.setSpeed(0, 0);
        _taskRunning = false;
        vTaskDelete(_taskHandle);
        _taskHandle = NULL;
        Serial.println("IR task stopped.");
    }
}

bool LineFollowingTask::getIsRunning() {
    return _taskRunning;
}

void LineFollowingTask::irMeasureTask(void *_parameters) {
    LineFollowingTask *self = static_cast<LineFollowingTask *>(_parameters);

    int baseSpeed = 24;
    const int minSpeed = 16;
    const int maxSpeed = 82;

    const int rightMotorOffset = 16;
    const int leftMotorOffset = 0;

    const int incrementSpeed = 1;
    const int decrementSpeedSmallTurn = 8;
    const int decrementSpeedSharpTurn = 32;

    const int correctionSmallTurn = 24;
    const int correctionSharpTurn = 32;

    while (self->_taskRunning) {
        int irLeft = self->_ir.getLeftSignal();
        int irRight = self->_ir.getRightSignal();
        int irMiddle = self->_ir.getMiddleSignal();

        int error = 0;
        if (irLeft == LOW && irMiddle == HIGH && irRight == LOW) {
            error = 0;
        } else if (irLeft == HIGH && irMiddle == HIGH && irRight == LOW) {
            error = -2;
        } else if (irLeft == LOW && irMiddle == HIGH && irRight == HIGH) {
            error = 2;
        } else if (irLeft == HIGH && irMiddle == LOW && irRight == LOW) {
            error = -1;
        } else if (irLeft == LOW && irMiddle == LOW && irRight == HIGH) {
            error = 1;
        }

        if (error == 0) {
            baseSpeed = constrain(baseSpeed + incrementSpeed, minSpeed, maxSpeed);
        } else if (abs(error) == 2) {
            baseSpeed = constrain(baseSpeed - decrementSpeedSharpTurn, minSpeed, maxSpeed);
        } else {
            baseSpeed = constrain(baseSpeed - decrementSpeedSmallTurn, minSpeed, maxSpeed);
        }

        float fuzzyLeftSpeed = baseSpeed + leftMotorOffset;
        float fuzzyRightSpeed = baseSpeed + rightMotorOffset;

        if (error == 0) {
            fuzzyLeftSpeed = baseSpeed + leftMotorOffset;
            fuzzyRightSpeed = baseSpeed + rightMotorOffset;
        } else if (error == -1) {
            fuzzyLeftSpeed = baseSpeed - correctionSmallTurn + leftMotorOffset;
            fuzzyRightSpeed = baseSpeed + correctionSmallTurn + rightMotorOffset;
        } else if (error == 1) {
            fuzzyLeftSpeed = baseSpeed + correctionSmallTurn + leftMotorOffset;
            fuzzyRightSpeed = baseSpeed - correctionSmallTurn + rightMotorOffset;
        } else if (error == -2) {
            fuzzyLeftSpeed = baseSpeed - correctionSharpTurn + leftMotorOffset;
            fuzzyRightSpeed = baseSpeed + correctionSharpTurn + rightMotorOffset;
        } else if (error == 2) {
            fuzzyLeftSpeed = baseSpeed + correctionSharpTurn + leftMotorOffset;
            fuzzyRightSpeed = baseSpeed - correctionSharpTurn + rightMotorOffset;
        }

        fuzzyLeftSpeed = constrain(fuzzyLeftSpeed, minSpeed, maxSpeed);
        fuzzyRightSpeed = constrain(fuzzyRightSpeed, minSpeed, maxSpeed);

        self->_motorControl.setSpeed(fuzzyRightSpeed, fuzzyLeftSpeed);

        vTaskDelay(pdMS_TO_TICKS(self->_vdelayTime));
    }

    Serial.println("IR task stopped.");
}